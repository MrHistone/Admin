/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package admin;

import admin.PublicDefault.ItemStatus;
import admin.frames.ItemExtended;
import database.Hoofditem;
import database.Itemcode;
import database.Itemsoort;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.swing.AbstractAction;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author Bart Jansen
 */
public class FilterWindow extends javax.swing.JDialog {

    Itemsoort itemsoortOnbekend = null;
    Itemsoort itemsoortGeenSelectie = null;
    Hoofditem hoofditemOnbekend = null;
    Hoofditem hoofditemGeenSelectie = null;
    Itemcode itemcodeGeenSelectie = null;
    Itemcode itemcodeOnbekend = null;
    Query query;
    EntityManager entityManager;
    List<Hoofditem> listHoofditem;
    List<Itemsoort> listItemsoort;
    List<Itemcode> listItemcode;
    ItemExtended itemExtended;
    Filter filter;
    DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
    EnterAction enterAction = new EnterAction(this);

    /**
     * Creates new form Filter
     */
    public FilterWindow(java.awt.Frame parent, boolean modal, ItemExtended itemExtended) {
        super(parent, modal);
        initComponents();
        // Do not execute this at design time.
        if (!java.beans.Beans.isDesignTime()) {
            entityManager = Persistence.createEntityManagerFactory("administration").createEntityManager();
            loadItemsoortCombobox();
            loadHoofditemComboBox();
            loadItemcodeComboBox();
            loadItemSoortComboBox();
            this.itemExtended = itemExtended;
            if (this.itemExtended != null) {
                filter = itemExtended.getFilter();
            } else {
                filter = new Filter();
            }
            loadFilterToScreen();
            loadAndSetPositionAndSizeOfWindow();
            this.setTitle("Filter");
            jXDatePickerDateTo.setFormats(dateFormat);
            jXDatePickerDateFrom.setFormats(dateFormat);
            // Put an action for Enter in the entire screen.
            KeyStroke keyStroke = KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0);
            getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW).put(keyStroke, "pressedEnter");
            getRootPane().getActionMap().put("pressedEnter", enterAction);
            // Enter does not work in the JXDatePicker
            jXDatePickerDateFrom.getEditor().addKeyListener(new KeyAdapter() {
                public void keyTyped(KeyEvent e) {
                    if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                        searchAction();
                    }
                }
            });
            jXDatePickerDateTo.getEditor().addKeyListener(new KeyAdapter() {
                public void keyTyped(KeyEvent e) {
                    if (e.getKeyChar() == KeyEvent.VK_ENTER) {
                        searchAction();
                    }
                }
            });

        }
    }

    public FilterWindow(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelFilterVelden = new javax.swing.JPanel();
        lblHoofditem = new javax.swing.JLabel();
        cmbHoofditem = new javax.swing.JComboBox<>();
        lblItemsoort = new javax.swing.JLabel();
        cmbItemsoort = new javax.swing.JComboBox<>();
        lblItemcode = new javax.swing.JLabel();
        cmbItemcode = new javax.swing.JComboBox<>();
        lblBeschrijving = new javax.swing.JLabel();
        tfBeschrijving = new javax.swing.JTextField();
        lblLocatie = new javax.swing.JLabel();
        tfLocatie = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        jPanelDatumDocument = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jXDatePickerDateFrom = new org.jdesktop.swingx.JXDatePicker();
        jXDatePickerDateTo = new org.jdesktop.swingx.JXDatePicker();
        jPanelButtons = new javax.swing.JPanel();
        btnSearch = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanelFilterVelden.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.red, java.awt.Color.red, java.awt.Color.darkGray), "Filter Velden"));

        lblHoofditem.setText("Hoofditem");

        cmbHoofditem.setMaximumSize(new java.awt.Dimension(6, 20));
        cmbHoofditem.setMinimumSize(new java.awt.Dimension(6, 20));

        lblItemsoort.setText("Itemsoort");

        cmbItemsoort.setMaximumSize(new java.awt.Dimension(6, 20));
        cmbItemsoort.setMinimumSize(new java.awt.Dimension(6, 20));

        lblItemcode.setText("Itemcode");

        cmbItemcode.setMaximumSize(new java.awt.Dimension(6, 20));
        cmbItemcode.setMinimumSize(new java.awt.Dimension(6, 20));

        lblBeschrijving.setText("Beschrijving");

        tfBeschrijving.setMaximumSize(new java.awt.Dimension(6, 20));

        lblLocatie.setText("Locatie");

        tfLocatie.setMaximumSize(new java.awt.Dimension(6, 20));

        lblStatus.setText("Status");

        javax.swing.GroupLayout jPanelFilterVeldenLayout = new javax.swing.GroupLayout(jPanelFilterVelden);
        jPanelFilterVelden.setLayout(jPanelFilterVeldenLayout);
        jPanelFilterVeldenLayout.setHorizontalGroup(
            jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterVeldenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBeschrijving)
                    .addComponent(lblLocatie)
                    .addComponent(lblHoofditem)
                    .addComponent(lblItemsoort)
                    .addComponent(lblItemcode)
                    .addComponent(lblStatus))
                .addGap(18, 18, 18)
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tfBeschrijving, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbItemcode, javax.swing.GroupLayout.Alignment.LEADING, 0, 217, Short.MAX_VALUE)
                    .addComponent(cmbItemsoort, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbHoofditem, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfLocatie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cmbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanelFilterVeldenLayout.setVerticalGroup(
            jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelFilterVeldenLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblHoofditem)
                    .addComponent(cmbHoofditem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemsoort)
                    .addComponent(cmbItemsoort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblItemcode)
                    .addComponent(cmbItemcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblBeschrijving)
                    .addComponent(tfBeschrijving, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLocatie)
                    .addComponent(tfLocatie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelFilterVeldenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanelDatumDocument.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.red, java.awt.Color.red, java.awt.Color.darkGray), "Datum Document"));

        jLabel1.setText("Datum vanaf");

        jLabel2.setText("Datum tot");

        javax.swing.GroupLayout jPanelDatumDocumentLayout = new javax.swing.GroupLayout(jPanelDatumDocument);
        jPanelDatumDocument.setLayout(jPanelDatumDocumentLayout);
        jPanelDatumDocumentLayout.setHorizontalGroup(
            jPanelDatumDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDatumDocumentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDatumDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanelDatumDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jXDatePickerDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jXDatePickerDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(112, 112, 112))
        );
        jPanelDatumDocumentLayout.setVerticalGroup(
            jPanelDatumDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelDatumDocumentLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelDatumDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jXDatePickerDateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanelDatumDocumentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jXDatePickerDateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        btnSearch.setText("Zoeken");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnCancel.setText("Annuleren");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelButtonsLayout = new javax.swing.GroupLayout(jPanelButtons);
        jPanelButtons.setLayout(jPanelButtonsLayout);
        jPanelButtonsLayout.setHorizontalGroup(
            jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReset)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelButtonsLayout.setVerticalGroup(
            jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanelButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnCancel)
                    .addComponent(btnReset))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanelFilterVelden, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelDatumDocument, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jPanelFilterVelden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanelDatumDocument, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        savePositionAndSizeOfWindow();
    }//GEN-LAST:event_formWindowClosing

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchAction();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        cancelAction();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        setDefaultValues();
    }//GEN-LAST:event_btnResetActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilterWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FilterWindow dialog = new FilterWindow(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<Hoofditem> cmbHoofditem;
    private javax.swing.JComboBox<Itemcode> cmbItemcode;
    private javax.swing.JComboBox<Itemsoort> cmbItemsoort;
    private javax.swing.JComboBox<String> cmbStatus;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanelButtons;
    private javax.swing.JPanel jPanelDatumDocument;
    private javax.swing.JPanel jPanelFilterVelden;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerDateFrom;
    private org.jdesktop.swingx.JXDatePicker jXDatePickerDateTo;
    private javax.swing.JLabel lblBeschrijving;
    private javax.swing.JLabel lblHoofditem;
    private javax.swing.JLabel lblItemcode;
    private javax.swing.JLabel lblItemsoort;
    private javax.swing.JLabel lblLocatie;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField tfBeschrijving;
    private javax.swing.JTextField tfLocatie;
    // End of variables declaration//GEN-END:variables

    private void savePositionAndSizeOfWindow() {
        try {
            // Get window name
            String className = this.getClass().getName();
            Dimension size = this.getSize();
            Point point = this.getLocationOnScreen();
            ConfigWindow confWin = new ConfigWindow();
            confWin.setDimension(size);
            confWin.setPoint(point);
            confWin.setWindowName(className);
            Preferences.saveProperties(confWin);
        } catch (Exception ex) {
            System.out.println("Something terrible happened with saving "
                    + "the window size and position. "
                    + "(loadAndSetPositionAndSizeOfWindow) of "
                    + this.getClass().getName() + ex);
        }

    }

    private void loadAndSetPositionAndSizeOfWindow() {
        ConfigWindow confWin = Preferences.loadProperties(this.getClass().getName());

        try {
            if (confWin.getDimension() != null && confWin.getDimension().getWidth() > 0 && confWin.getDimension().getHeight() > 0) {
                this.setSize(confWin.getDimension());
            }

            if (confWin.getPoint() != null && confWin.getPoint().getX() > 0 && confWin.getPoint().getY() > 0) {
                this.setLocation(confWin.getPoint());
            }
        } catch (Exception ex) {
            System.out.println("Something terrible happened with loading "
                    + "and/or setting the window size and position. "
                    + "(loadAndSetPositionAndSizeOfWindow) of "
                    + this.getClass().getName() + ex);
        }

    }

    private void loadItemsoortCombobox() {
        cmbItemsoort.removeAllItems();
        itemsoortGeenSelectie = new Itemsoort();
        itemsoortGeenSelectie.setItemsoortBeschrijving("Geen selectie");
        itemsoortGeenSelectie.setItemsoortItemsoort("...");
        cmbItemsoort.addItem(itemsoortGeenSelectie);
        query = entityManager.createNamedQuery("Itemsoort.findAll", Itemsoort.class);
        listItemsoort = query.getResultList();
        for (Itemsoort is : listItemsoort) {
            cmbItemsoort.addItem(is);
            if (is.getItemsoortItemsoort().equalsIgnoreCase("nb")) {
                itemsoortOnbekend = is;
            }
        }
        cmbItemsoort.setSelectedItem(itemsoortGeenSelectie);
    }

    private void loadHoofditemComboBox() {
        cmbHoofditem.removeAllItems();

        hoofditemGeenSelectie = new Hoofditem();
        hoofditemGeenSelectie.setHoofditemBeschrijving("Geen selectie");
        hoofditemGeenSelectie.setHoofditemNaam("...");
        cmbHoofditem.addItem(hoofditemGeenSelectie);
        query = entityManager.createNamedQuery("Hoofditem.findAll", Hoofditem.class);
        listHoofditem = query.getResultList();
        for (Hoofditem hi : listHoofditem) {
            cmbHoofditem.addItem(hi);

            if (hi.getHoofditemNaam().equalsIgnoreCase("nb")) {
                hoofditemOnbekend = hi;
            }
        }

        cmbHoofditem.setSelectedItem(hoofditemGeenSelectie);
    }

    private void loadItemcodeComboBox() {
        cmbItemcode.removeAllItems();

        itemcodeGeenSelectie = new Itemcode();
        itemcodeGeenSelectie.setItemcodeBeschrijving("...");
        itemcodeGeenSelectie.setItemcodeCode("Geen selectie");
        cmbItemcode.addItem(itemcodeGeenSelectie);
        query = entityManager.createNamedQuery("Itemcode.findAll", Itemcode.class);
        listItemcode = query.getResultList();
        for (Itemcode ic : listItemcode) {
            cmbItemcode.addItem(ic);

            if (ic.getItemcodeCode().equalsIgnoreCase("onbekend")) {
                itemcodeOnbekend = ic;
            }
        }

        cmbItemcode.setSelectedItem(itemcodeGeenSelectie);
    }

    private void loadFilterToScreen() {
        tfBeschrijving.setText(filter.getItemBeschrijving());
        tfLocatie.setText(filter.getItemLocatie());
        if (filter.getHoofditem() == null) {
            cmbHoofditem.setSelectedItem(hoofditemGeenSelectie);
        } else {
            cmbHoofditem.setSelectedItem(filter.getHoofditem());
        }
        if (filter.getItemsoort() == null) {
            cmbItemsoort.setSelectedItem(itemsoortGeenSelectie);
        } else {
            cmbItemsoort.setSelectedItem(filter.getItemsoort());
        }
        if (filter.getItemcode() == null) {
            cmbItemcode.setSelectedItem(itemcodeGeenSelectie);
        } else {
            cmbItemcode.setSelectedItem(filter.getItemcode());
        }

    }

    private void searchAction() {
        filter.setItemBeschrijving(tfBeschrijving.getText());
        filter.setItemLocatie(tfLocatie.getText());
        filter.setHoofditem((Hoofditem) cmbHoofditem.getSelectedItem());
        filter.setItemsoort((Itemsoort) cmbItemsoort.getSelectedItem());
        filter.setItemcode((Itemcode) cmbItemcode.getSelectedItem());
        filter.setDateFrom(jXDatePickerDateFrom.getDate());
        filter.setDateTo(jXDatePickerDateTo.getDate());
        filter.setItemStatus(null);       
        for (ItemStatus itemStatus : ItemStatus.values()) {
            if (itemStatus.toString().equals((String) cmbStatus.getSelectedItem())) {
                filter.setItemStatus(itemStatus);
            }
        }

        itemExtended.setFilter(filter);
        itemExtended.searchAction();
    }

    private void cancelAction() {
        itemExtended.hideFilterWindow();
    }

    public void setFilter(Filter filter) {
        this.filter = filter;
        loadFilterToScreen();
    }

    private void loadItemSoortComboBox() {
        cmbStatus.removeAllItems();
        cmbStatus.addItem("Geen Selectie (...)");
        for (ItemStatus itemStatus : ItemStatus.values()) {
            cmbStatus.addItem(itemStatus.toString());
        }
    }

    private void setDefaultValues(){
        cmbItemcode.setSelectedItem(itemcodeGeenSelectie);
        cmbItemsoort.setSelectedItem(itemsoortGeenSelectie);
        cmbHoofditem.setSelectedItem(hoofditemGeenSelectie);
        cmbStatus.setSelectedIndex(0);
        tfBeschrijving.setText("");
        tfLocatie.setText("");
        jXDatePickerDateFrom.setDate(null);
        jXDatePickerDateTo.setDate(null);
    }
    
    
    static class EnterAction extends AbstractAction {

        FilterWindow filterWindow;

        public EnterAction(FilterWindow filterWindow) {
            this.filterWindow = filterWindow;
        }

        @Override
        public void actionPerformed(ActionEvent tf) {
            filterWindow.searchAction();
        }
    }

}
