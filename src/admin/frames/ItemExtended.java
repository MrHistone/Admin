package admin.frames;

import admin.ColumnWidth;
import admin.Config;
import admin.Filter;
import admin.FilterWindow;
import admin.MDIStart;
import admin.Preferences;
import admin.PublicDefault;
import admin.PublicDefault.ItemStatus;
import admin.PublicDefault.ProgramMode;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.swing.table.DefaultTableModel;
import database.*;
import java.awt.Desktop;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.attribute.BasicFileAttributes;
import java.nio.file.attribute.FileTime;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.Persistence;
import javax.persistence.RollbackException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.SwingUtilities;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.PopupMenuEvent;
import javax.swing.event.PopupMenuListener;
import javax.swing.table.TableColumnModel;
import org.apache.commons.io.FilenameUtils;

/**
 *
 * @author Bart 2016
 */
public class ItemExtended extends javax.swing.JPanel {

    private Query query;
    private List<Item> listMasterTable;
    private List<Hoofditem> listHoofdItem;
    private List<Itemsoort> listItemSoort;
    private List<Itemcode> listItemcode;
    private DefaultTableModel model;
    private final DateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
    private EntityManager entityManager;
    private Config config;
    private Itemsoort itemsoortOnbekend = null;
    private Hoofditem hoofditemOnbekend = null;
    private Itemcode itemCodeOnbekend = null;
    private ProgramMode programMode;
    private Item displayedItem = null;
    private Hoofditem hiGeenSelectie;
    private ArrayList<ColumnWidth> colWidths;
    private Filter filter;
    private FilterWindow filterWindow;
    private Desktop desktop;
    private JMenuItem menuItemAdd;
    private JMenuItem menuItemRemove;
    private JMenuItem menuItemRemoveAll;
    private JMenuItem menuItemSetStatusLeeg;
    private JMenuItem menuItemSetStatusBelangrijk;
    private JMenuItem menuItemSetStatusOnbelangrijk;
    private JMenuItem menuItemSetStatusArchief;
    private JMenuItem menuItemSetStatusDeleted;
    private JMenuItem menuItemSetStatusBijzonder;
    private JMenuItem menuItemPreview;
    private PublicDefault publicDefault;
    private MDIStart mdiStart;

    /**
     * Creates new form ItemExtended
     */
    public ItemExtended() {
        initComponents();

        // Do not execute this at design time.
        if (!java.beans.Beans.isDesignTime()) {
            // Create an instance of PublicDefault Class
            publicDefault = new PublicDefault();

            entityManager = Persistence.createEntityManagerFactory("administration").createEntityManager();
            filter = new Filter();
            config = Preferences.loadProperties();
            model = (DefaultTableModel) masterTable.getModel();
            programMode = ProgramMode.DISPLAY;
            loadSelectionListener();
            setStates();
            loadDataComboBox();
            addPopupMenuToTable();
            colWidths = Preferences.loadColumns().getColumns();
            desktop = Desktop.getDesktop();
            setTableConfiguration();
            loadData();

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        pnlEditRecord = new javax.swing.JPanel();
        lblID = new javax.swing.JLabel();
        tfItemID = new javax.swing.JTextField();
        lblHoofditemRecord = new javax.swing.JLabel();
        cmbHoofdItem = new javax.swing.JComboBox();
        lblItemsoort = new javax.swing.JLabel();
        cmbItemSoort = new javax.swing.JComboBox();
        lblItemcode = new javax.swing.JLabel();
        cmbItemcode = new javax.swing.JComboBox<>();
        lblBeschrijving = new javax.swing.JLabel();
        tfItemBeschrijving = new javax.swing.JTextField();
        lblLocatie = new javax.swing.JLabel();
        tfItemLocatie = new javax.swing.JTextField();
        lblDatumDocument = new javax.swing.JLabel();
        tfItemDatumDocument = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        cmbStatus = new javax.swing.JComboBox<>();
        btnLegeStatus = new javax.swing.JButton();
        lblDateCreated = new javax.swing.JLabel();
        tfItemDateCreated = new javax.swing.JTextField();
        lblDateModified = new javax.swing.JLabel();
        tfItemDateModified = new javax.swing.JTextField();
        pnlButtonsBottom = new javax.swing.JPanel();
        btnSave = new javax.swing.JButton();
        btnAnnuleer = new javax.swing.JButton();
        btnSelectFile = new javax.swing.JButton();
        btnOpenGeselecteerdBestand = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnNieuw = new javax.swing.JButton();
        btnVerwijder = new javax.swing.JButton();
        btnBewerken = new javax.swing.JButton();
        cmbHoofdItemSelect = new javax.swing.JComboBox();
        btnSaveColumns = new javax.swing.JButton();
        btnReadDirectory = new javax.swing.JButton();
        lblHoofditem = new javax.swing.JLabel();
        tfZoekenNaar = new javax.swing.JTextField();
        lblZoekenNaar = new javax.swing.JLabel();
        btnStartZoeken = new javax.swing.JButton();
        btnGeavanceerdZoeken = new javax.swing.JButton();
        btnVoorbeeldWeergave = new javax.swing.JButton();

        masterTable.setAutoCreateRowSorter(true);
        masterTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Beschrijving", "Hoofditem", "ItemSoort", "Datum Document", "Locatie", "Itemcode", "Bestandsnaam", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        masterScrollPane.setViewportView(masterTable);

        lblID.setText("ID");

        tfItemID.setEditable(false);
        tfItemID.setEnabled(false);

        lblHoofditemRecord.setText("HoofdItem");

        cmbHoofdItem.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblItemsoort.setText("ItemSoort");

        cmbItemSoort.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblItemcode.setText("ItemCode");

        lblBeschrijving.setText("Beschrijving");

        lblLocatie.setText("Locatie");

        lblDatumDocument.setText("Datum Document");

        lblStatus.setText("Status");

        btnLegeStatus.setText("Lege Status");
        btnLegeStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLegeStatusActionPerformed(evt);
            }
        });

        lblDateCreated.setText("Date Created");

        tfItemDateCreated.setEditable(false);

        lblDateModified.setText("Date Modified");

        tfItemDateModified.setEditable(false);

        javax.swing.GroupLayout pnlEditRecordLayout = new javax.swing.GroupLayout(pnlEditRecord);
        pnlEditRecord.setLayout(pnlEditRecordLayout);
        pnlEditRecordLayout.setHorizontalGroup(
            pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditRecordLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblLocatie)
                    .addComponent(lblDatumDocument)
                    .addComponent(lblBeschrijving)
                    .addComponent(lblItemcode)
                    .addComponent(lblHoofditemRecord)
                    .addComponent(lblItemsoort)
                    .addComponent(lblID)
                    .addComponent(lblStatus)
                    .addComponent(lblDateCreated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlEditRecordLayout.createSequentialGroup()
                        .addComponent(tfItemID, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(pnlEditRecordLayout.createSequentialGroup()
                        .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tfItemDatumDocument, javax.swing.GroupLayout.DEFAULT_SIZE, 693, Short.MAX_VALUE)
                            .addComponent(tfItemLocatie)
                            .addComponent(tfItemBeschrijving)
                            .addComponent(cmbItemcode, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbItemSoort, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbHoofdItem, 0, 693, Short.MAX_VALUE))
                        .addGap(262, 262, 262))
                    .addGroup(pnlEditRecordLayout.createSequentialGroup()
                        .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cmbStatus, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tfItemDateCreated, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlEditRecordLayout.createSequentialGroup()
                                .addComponent(lblDateModified)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tfItemDateModified, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnLegeStatus))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        pnlEditRecordLayout.setVerticalGroup(
            pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEditRecordLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbHoofdItem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHoofditemRecord))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblItemsoort, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(cmbItemSoort, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbItemcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblItemcode))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfItemBeschrijving, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblBeschrijving))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfItemLocatie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblLocatie))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfItemDatumDocument, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDatumDocument))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStatus)
                    .addComponent(cmbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLegeStatus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlEditRecordLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateCreated)
                    .addComponent(tfItemDateCreated, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDateModified)
                    .addComponent(tfItemDateModified, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnAnnuleer.setText("Annuleer");
        btnAnnuleer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnnuleerActionPerformed(evt);
            }
        });

        btnSelectFile.setText("Selecteer Bestand");
        btnSelectFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectFileActionPerformed(evt);
            }
        });

        btnOpenGeselecteerdBestand.setText("Open Geselecteerd Bestand");
        btnOpenGeselecteerdBestand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenGeselecteerdBestandActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlButtonsBottomLayout = new javax.swing.GroupLayout(pnlButtonsBottom);
        pnlButtonsBottom.setLayout(pnlButtonsBottomLayout);
        pnlButtonsBottomLayout.setHorizontalGroup(
            pnlButtonsBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsBottomLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAnnuleer, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnOpenGeselecteerdBestand)
                .addContainerGap())
        );
        pnlButtonsBottomLayout.setVerticalGroup(
            pnlButtonsBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlButtonsBottomLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlButtonsBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlButtonsBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSelectFile, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnOpenGeselecteerdBestand))
                    .addGroup(pnlButtonsBottomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAnnuleer)))
                .addContainerGap())
        );

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnNieuw.setText("Nieuw");
        btnNieuw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNieuwActionPerformed(evt);
            }
        });

        btnVerwijder.setText("Verwijder");
        btnVerwijder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerwijderActionPerformed(evt);
            }
        });

        btnBewerken.setText("Bewerken");
        btnBewerken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBewerkenActionPerformed(evt);
            }
        });

        cmbHoofdItemSelect.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbHoofdItemSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbHoofdItemSelectActionPerformed(evt);
            }
        });

        btnSaveColumns.setText("Save Columns");
        btnSaveColumns.setToolTipText("Save location and sizes of the columns.");
        btnSaveColumns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveColumnsActionPerformed(evt);
            }
        });

        btnReadDirectory.setText("Read Directory");
        btnReadDirectory.setToolTipText("Read and analyze entire directory. New entries are stored in the database.");
        btnReadDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadDirectoryActionPerformed(evt);
            }
        });

        lblHoofditem.setText("Hoofditem");

        lblZoekenNaar.setText("Zoeken naar:");

        btnStartZoeken.setText("Start Zoeken");
        btnStartZoeken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartZoekenActionPerformed(evt);
            }
        });

        btnGeavanceerdZoeken.setText("Geavanceerd Zoeken");
        btnGeavanceerdZoeken.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeavanceerdZoekenActionPerformed(evt);
            }
        });

        btnVoorbeeldWeergave.setText("VoorbeeldWeergave");
        btnVoorbeeldWeergave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVoorbeeldWeergaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(masterScrollPane)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnRefresh)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnNieuw)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnBewerken)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnVerwijder))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblHoofditem)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cmbHoofdItemSelect, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btnReadDirectory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnSaveColumns, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblZoekenNaar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tfZoekenNaar, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btnGeavanceerdZoeken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btnStartZoeken, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnVoorbeeldWeergave)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnlEditRecord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlButtonsBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefresh)
                    .addComponent(btnNieuw)
                    .addComponent(btnVerwijder)
                    .addComponent(btnBewerken)
                    .addComponent(btnSaveColumns)
                    .addComponent(lblZoekenNaar)
                    .addComponent(tfZoekenNaar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStartZoeken))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbHoofdItemSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblHoofditem)
                    .addComponent(btnReadDirectory)
                    .addComponent(btnGeavanceerdZoeken)
                    .addComponent(btnVoorbeeldWeergave))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlEditRecord, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlButtonsBottom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void loadData() {
        model.setRowCount(0);
        if (listMasterTable != null && listMasterTable.size() > 0) {
            listMasterTable.clear();
        }
        Hoofditem hiSelected = (Hoofditem) cmbHoofdItemSelect.getSelectedItem();
        if (hiSelected != null && !hiSelected.getHoofditemNaam().equals("...")) {
            query = entityManager.createNamedQuery("Item.findByItemHoofditemNaam", Item.class);
            query.setParameter("hoofditemnaam", hiSelected.getHoofditemNaam());

        } else {
            query = entityManager.createNamedQuery("Item.findAll", Item.class);
        }

        listMasterTable = query.getResultList();
        for (Item item : listMasterTable) {
            addItemToModel(item);
        }

        if (model.getRowCount() > 0) {
            masterTable.setRowSelectionInterval(0, 0);
        }

    }

    private void loadDataComboBox() {
        // HoofdItem ComboBox
        cmbHoofdItem.removeAllItems();
        cmbHoofdItemSelect.removeAllItems();
        hiGeenSelectie = new Hoofditem();
        hiGeenSelectie.setHoofditemBeschrijving("Geen selectie");
        hiGeenSelectie.setHoofditemNaam("...");
        cmbHoofdItemSelect.addItem(hiGeenSelectie);
        query = entityManager.createNamedQuery("Hoofditem.findAll", Hoofditem.class);
        listHoofdItem = query.getResultList();
        for (Hoofditem hi : listHoofdItem) {
            cmbHoofdItem.addItem(hi);
            cmbHoofdItemSelect.addItem(hi);
            if (hi.getHoofditemNaam().equalsIgnoreCase("nb")) {
                hoofditemOnbekend = hi;
            }
        }

        // ItemCode ComboBox
        cmbItemcode.removeAllItems();
        query = entityManager.createNamedQuery("Itemcode.findAll", Itemcode.class);
        listItemcode = query.getResultList();
        for (Itemcode ic : listItemcode) {
            cmbItemcode.addItem(ic);
            if (ic.getItemcodeCode().equalsIgnoreCase("onbekend")) {
                itemCodeOnbekend = ic;
            }
        }

        // ItemSoort ComboBox
        cmbItemSoort.removeAllItems();
        query = entityManager.createNamedQuery("Itemsoort.findAll", Itemsoort.class);
        listItemSoort = query.getResultList();
        for (Itemsoort is : listItemSoort) {
            cmbItemSoort.addItem(is);
            if (is.getItemsoortItemsoort().equalsIgnoreCase("nb")) {
                itemsoortOnbekend = is;
            }
        }

        // ItemStatus ComboBox
        cmbStatus.removeAllItems();
        for (ItemStatus itemStatus : ItemStatus.values()) {
            cmbStatus.addItem(itemStatus);
        }
        cmbStatus.setSelectedItem(null);
    }

    private void addItemToModel(Item item) {
        Object[] o = new Object[8];
        o[0] = item.getItemBeschrijving();
        o[1] = item.getHoofditem().getHoofditemBeschrijving();
        o[2] = item.getItemsoort().toString();
        o[3] = item.getItemDatumDocument();
        o[4] = item.getItemLocatie();
        o[5] = item.getItemcode().getItemcodeCode();
        File file = new File(item.getItemLocatie());
        String fileName = file.getName();
        o[6] = fileName;
        o[7] = item.getItemstatus();

        model.addRow(o);
    }

    private void newRecord() {
        // Clear all input fields

        tfItemID.setText("");
        tfItemBeschrijving.setText("");
        tfItemDatumDocument.setText("");
        tfItemLocatie.setText("");
        cmbHoofdItem.setSelectedItem(hoofditemOnbekend);
        cmbItemSoort.setSelectedItem(itemsoortOnbekend);
        cmbItemcode.setSelectedItem(itemCodeOnbekend);
        cmbStatus.setSelectedItem(null);
        tfItemDateCreated.setText(dateFormat.format(Calendar.getInstance().getTime()));
        tfItemDateModified.setText(dateFormat.format(Calendar.getInstance().getTime()));
        programMode = ProgramMode.ADD;
        setStates();
    }


    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        loadData();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnNieuwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNieuwActionPerformed
        newRecord();
    }//GEN-LAST:event_btnNieuwActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        saveItem();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnSelectFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectFileActionPerformed
        JFileChooser fc = new JFileChooser();
        File f = new File(Preferences.loadProperties().getLastDirectory());
        fc.setCurrentDirectory(f);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int returnVal = fc.showSaveDialog(this);

        File selectedFile = null;
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                selectedFile = fc.getSelectedFile();
                String canonicalPath = selectedFile.getCanonicalPath();
                String fullPath = FilenameUtils.getFullPath(canonicalPath);
                String fileParent = selectedFile.getParentFile().getName();

                // Set hoofditem, based on the parent dictory of the selected file.
                setHoofditemComboBox(fileParent);

                // Save last accessed directory to the config file
                if (!fullPath.equals(config.getLastDirectory())) {
                    config.setLastDirectory(fullPath);
                    Preferences.saveProperties(config);
                }
                // Set itemsoort based on extension of the file
                String extension = FilenameUtils.getExtension(canonicalPath);
                tfItemLocatie.setText(canonicalPath);
                setItemSoortComboBox(extension.toLowerCase());

                // Get file creation date and time
                BasicFileAttributes attributes = Files.readAttributes(selectedFile.toPath(), BasicFileAttributes.class);
                FileTime creationTime = attributes.lastModifiedTime();
                Date dateCreate = new Date(creationTime.toMillis());
                tfItemDatumDocument.setText(dateFormat.format(dateCreate));

            } catch (IOException ex) {
                Logger.getLogger(ItemExtended.class.getName()).log(Level.SEVERE, null, ex);
            }

        }


    }//GEN-LAST:event_btnSelectFileActionPerformed

    private void btnAnnuleerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnnuleerActionPerformed
        programMode = ProgramMode.DISPLAY;
        setStates();
        displaySelectedRow();
    }//GEN-LAST:event_btnAnnuleerActionPerformed

    private void btnBewerkenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBewerkenActionPerformed
        programMode = ProgramMode.CHANGE;
        setStates();
    }//GEN-LAST:event_btnBewerkenActionPerformed

    private void btnVerwijderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerwijderActionPerformed
        removeItem();
    }//GEN-LAST:event_btnVerwijderActionPerformed

    private void cmbHoofdItemSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbHoofdItemSelectActionPerformed
        loadData();
    }//GEN-LAST:event_cmbHoofdItemSelectActionPerformed

    private void btnSaveColumnsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveColumnsActionPerformed
        saveWidthsAndPositionsOfColumns();


    }//GEN-LAST:event_btnSaveColumnsActionPerformed

    private void btnReadDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadDirectoryActionPerformed
        importFilesFromDirectory();

    }//GEN-LAST:event_btnReadDirectoryActionPerformed

    private void btnStartZoekenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartZoekenActionPerformed
        startSimpleSearch(tfZoekenNaar.getText());
    }//GEN-LAST:event_btnStartZoekenActionPerformed

    private void btnGeavanceerdZoekenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeavanceerdZoekenActionPerformed
        displayFilter();
    }//GEN-LAST:event_btnGeavanceerdZoekenActionPerformed

    private void btnOpenGeselecteerdBestandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenGeselecteerdBestandActionPerformed
        openSelectedFile();


    }//GEN-LAST:event_btnOpenGeselecteerdBestandActionPerformed

    private void btnLegeStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLegeStatusActionPerformed
        cmbStatus.setSelectedItem(null);
    }//GEN-LAST:event_btnLegeStatusActionPerformed

    private void btnVoorbeeldWeergaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVoorbeeldWeergaveActionPerformed
        voorbeeldWeergave();

    }//GEN-LAST:event_btnVoorbeeldWeergaveActionPerformed

    private void setItemSoortComboBox(String extension) {
        boolean foundMatch = false;
        for (Itemsoort is : listItemSoort) {
            if ((extension.equalsIgnoreCase("doc") || extension.equalsIgnoreCase("docx")) && is.getItemsoortItemsoort().equalsIgnoreCase("word")) {
                cmbItemSoort.setSelectedItem(is);
                foundMatch = true;
                break;
            }
            if (extension.equalsIgnoreCase("pdf") && is.getItemsoortItemsoort().equalsIgnoreCase("pdf")) {
                cmbItemSoort.setSelectedItem(is);
                foundMatch = true;
                break;
            }
            if ((extension.equalsIgnoreCase("png") || extension.equalsIgnoreCase("jpg") || extension.equalsIgnoreCase("bmp")) && is.getItemsoortItemsoort().equalsIgnoreCase("img")) {
                cmbItemSoort.setSelectedItem(is);
                foundMatch = true;
                break;
            }
            if ((extension.equalsIgnoreCase("xls") || extension.equalsIgnoreCase("xlsx")) && is.getItemsoortItemsoort().equalsIgnoreCase("xls")) {
                cmbItemSoort.setSelectedItem(is);
                foundMatch = true;
                break;
            }
            if ((extension.equalsIgnoreCase("zip")) && is.getItemsoortItemsoort().equalsIgnoreCase("zip")) {
                cmbItemSoort.setSelectedItem(is);
                foundMatch = true;
                break;
            }

        }
        if (!foundMatch && itemsoortOnbekend != null) {
            cmbItemSoort.setSelectedItem(itemsoortOnbekend);
        }
    }

    private void setHoofditemComboBox(String fileParent) {
        boolean foundMatch = false;
        for (Hoofditem hi : listHoofdItem) {
            if (fileParent.equalsIgnoreCase(hi.getHoofditemNaam())) {
                cmbHoofdItem.setSelectedItem(hi);
                foundMatch = true;
                break;
            }
        }

        if (!foundMatch && hoofditemOnbekend != null) {
            cmbHoofdItem.setSelectedItem(hoofditemOnbekend);
        }
    }

    private void saveItem() {

        switch (programMode) {
            case ADD:
                addItem(assembleItemFromScreen());
                break;
            case DELETE:
                removeItem();
                break;
            case CHANGE:
                changeItem();
                break;
        }

        programMode = ProgramMode.DISPLAY;
        setStates();

    }

    private Item assembleItemFromScreen() {
        Item it = new Item();
        try {
            it.setHoofditem((Hoofditem) cmbHoofdItem.getSelectedItem());
            it.setItemsoort((Itemsoort) cmbItemSoort.getSelectedItem());
            it.setItemcode((Itemcode) cmbItemcode.getSelectedItem());
            it.setItemstatus((ItemStatus) cmbStatus.getSelectedItem());
            it.setItemBeschrijving(tfItemBeschrijving.getText());
            it.setItemLocatie(tfItemLocatie.getText());
            it.setItemDatumDocument(dateFormat.parse(tfItemDatumDocument.getText()));
            it.setItemDateCreated(dateFormat.parse(tfItemDateCreated.getText()));
            it.setItemDateModified(dateFormat.parse(tfItemDateModified.getText()));
        } catch (ParseException ex) {
            System.out.println("Something went wrong with parsing the date. (assembleItemFromScreen) " + ex);
        } catch (Exception ex) {
            System.out.println("Something went wrong. (assembleItemFromScreen) " + ex);
        }
        return it;
    }

    private void addItem(Item item) {
        try {
            entityManager.getTransaction().begin();
            entityManager.persist(item);
            entityManager.getTransaction().commit();

            listMasterTable.add(item);
            addItemToModel(item);
        } catch (Exception ex) {
            System.out.println("Something went wrong. (addItem) " + ex);
        }
    }

    private void removeItem() {
        int idx = masterTable.getSelectedRow();
        if (idx > -1) {
            Item item = listMasterTable.get(idx);
            int response = JOptionPane.showConfirmDialog(null, item.getItemBeschrijving() + " VERWIJDEREN?", "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.YES_OPTION) {
                entityManager.getTransaction().begin();
                entityManager.remove(item);
                entityManager.getTransaction().commit();
            }
        }

        programMode = ProgramMode.DISPLAY;
        setStates();
        loadData();
    }

    private void changeItem() {
        List<Item> its = entityManager.createNamedQuery("Item.findByItemId", Item.class)
                .setParameter("itemId", Integer.parseInt(tfItemID.getText()))
                .getResultList();
        Item it = its.get(0);

        try {
            entityManager.getTransaction().begin();
            if (it.getHoofditem() != (Hoofditem) cmbHoofdItem.getSelectedItem()) {
                it.setHoofditem((Hoofditem) cmbHoofdItem.getSelectedItem());
            }
            if (it.getItemsoort() != (Itemsoort) cmbItemSoort.getSelectedItem()) {
                it.setItemsoort((Itemsoort) cmbItemSoort.getSelectedItem());
            }

            if (it.getItemcode() != (Itemcode) cmbItemcode.getSelectedItem()) {
                it.setItemcode((Itemcode) cmbItemcode.getSelectedItem());
            }

            if (it.getItemstatus() != (ItemStatus) cmbStatus.getSelectedItem()) {
                it.setItemstatus((ItemStatus) cmbStatus.getSelectedItem());
            }

            if (!it.getItemBeschrijving().equals(tfItemBeschrijving.getText())) {
                it.setItemBeschrijving(tfItemBeschrijving.getText());
            }
            if (!it.getItemLocatie().equals(tfItemLocatie.getText())) {
                it.setItemLocatie(tfItemLocatie.getText());
            }
            if (it.getItemDatumDocument() != dateFormat.parse(tfItemDatumDocument.getText())) {
                it.setItemDatumDocument(dateFormat.parse(tfItemDatumDocument.getText()));
            }
            it.setItemDateModified(Calendar.getInstance().getTime());
            entityManager.getTransaction().commit();
        } catch (ParseException ex) {
            System.out.println("Er is iets fout gegaan met het parsen van de datum. (changeItem)" + ex);
        } catch (Exception ex) {
            System.out.println("Er is iets helemaal fout gegaan. (changeItem)" + ex);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnnuleer;
    private javax.swing.JButton btnBewerken;
    private javax.swing.JButton btnGeavanceerdZoeken;
    private javax.swing.JButton btnLegeStatus;
    private javax.swing.JButton btnNieuw;
    private javax.swing.JButton btnOpenGeselecteerdBestand;
    private javax.swing.JButton btnReadDirectory;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveColumns;
    private javax.swing.JButton btnSelectFile;
    private javax.swing.JButton btnStartZoeken;
    private javax.swing.JButton btnVerwijder;
    private javax.swing.JButton btnVoorbeeldWeergave;
    private javax.swing.JComboBox cmbHoofdItem;
    private javax.swing.JComboBox cmbHoofdItemSelect;
    private javax.swing.JComboBox cmbItemSoort;
    private javax.swing.JComboBox<Itemcode> cmbItemcode;
    private javax.swing.JComboBox<ItemStatus> cmbStatus;
    private javax.swing.JLabel lblBeschrijving;
    private javax.swing.JLabel lblDateCreated;
    private javax.swing.JLabel lblDateModified;
    private javax.swing.JLabel lblDatumDocument;
    private javax.swing.JLabel lblHoofditem;
    private javax.swing.JLabel lblHoofditemRecord;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblItemcode;
    private javax.swing.JLabel lblItemsoort;
    private javax.swing.JLabel lblLocatie;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblZoekenNaar;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JPanel pnlButtonsBottom;
    private javax.swing.JPanel pnlEditRecord;
    private javax.swing.JTextField tfItemBeschrijving;
    private javax.swing.JTextField tfItemDateCreated;
    private javax.swing.JTextField tfItemDateModified;
    private javax.swing.JTextField tfItemDatumDocument;
    private javax.swing.JTextField tfItemID;
    private javax.swing.JTextField tfItemLocatie;
    private javax.swing.JTextField tfZoekenNaar;
    // End of variables declaration//GEN-END:variables

    private void setStates() {
        boolean editable = false;
        switch (programMode) {
            case DISPLAY:
                editable = false;
                break;
            case ADD:
                editable = true;
                break;
            case CHANGE:
                editable = true;
                break;

        }
        tfItemBeschrijving.setEditable(editable);
        tfItemLocatie.setEditable(editable);
        cmbItemSoort.setEnabled(editable);
        cmbHoofdItem.setEnabled(editable);
        cmbItemcode.setEnabled(editable);
        cmbStatus.setEnabled(editable);
        tfItemBeschrijving.setEnabled(editable);
        tfItemDateCreated.setEnabled(false);
        tfItemDateModified.setEnabled(false);
        tfItemDatumDocument.setEnabled(false);
        tfItemLocatie.setEnabled(editable);

        btnSave.setEnabled(editable);
        btnSelectFile.setEnabled(editable);
        btnAnnuleer.setEnabled(editable);
        btnLegeStatus.setEnabled(editable);

        masterTable.setEnabled(!editable);

    }

    private void displaySelectedRow() {
        if (programMode == ProgramMode.DISPLAY) {
            int idx = masterTable.getSelectedRow();
            if (idx > -1) {
                displayedItem = listMasterTable.get(idx);
                tfItemID.setText(String.valueOf(displayedItem.getItemId()));
                tfItemBeschrijving.setText(displayedItem.getItemBeschrijving());
                tfItemLocatie.setText(displayedItem.getItemLocatie());
                cmbHoofdItem.setSelectedItem(displayedItem.getHoofditem());
                cmbItemSoort.setSelectedItem(displayedItem.getItemsoort());
                cmbItemcode.setSelectedItem(displayedItem.getItemcode());
                cmbStatus.setSelectedItem(displayedItem.getItemstatus());
                if (displayedItem.getItemDatumDocument() != null) {
                    tfItemDatumDocument.setText(dateFormat.format(displayedItem.getItemDatumDocument()));
                }
                if (displayedItem.getItemDateCreated() != null) {
                    tfItemDateCreated.setText(dateFormat.format(displayedItem.getItemDateCreated()));
                }
                if (displayedItem.getItemDateModified() != null) {
                    tfItemDateModified.setText(dateFormat.format(displayedItem.getItemDateModified()));
                }
            }
        }
    }

    private void loadSelectionListener() {
        masterTable.getSelectionModel().addListSelectionListener(listSelectionListener);
        masterTable.addMouseListener(new TableMouseListener());
    }

    ListSelectionListener listSelectionListener = new ListSelectionListener() {
        @Override
        public void valueChanged(ListSelectionEvent e) {
            displaySelectedRow();
        }
    };

    protected void importFilesFromDirectory() {
        try {

            JFileChooser fc = new JFileChooser();
            File f = new File(Preferences.loadProperties().getLastDirectory());
            fc.setCurrentDirectory(f);
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int returnVal = fc.showSaveDialog(this);

            File selectedFile = null;
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                selectedFile = fc.getSelectedFile();
                // Read all files in this directory
                // 
                Files.walk(Paths.get(selectedFile.getCanonicalPath())).forEach(filePath -> {
                    if (Files.isRegularFile(filePath)) {
                        analyzeAndSave(filePath.toFile());
                    }
                });
            }
        } catch (IOException ex) {
            Logger.getLogger(ItemExtended.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    protected void saveWidthsAndPositionsOfColumns() {
        // Get widths and positions of columns. Save in preferences file.
        int cols = masterTable.getColumnCount();
        TableColumnModel columnModel = masterTable.getColumnModel();
        ArrayList<ColumnWidth> colWidths = new ArrayList();
        for (int i = 0; i < cols; i++) {
            ColumnWidth colWidth = new ColumnWidth();
            colWidth.setColumnIdentifier(columnModel.getColumn(i).getIdentifier().toString());
            colWidth.setColumnWidth(columnModel.getColumn(i).getWidth());
            colWidth.setColumnModelIndex(columnModel.getColumn(i).getModelIndex());
            colWidth.setColumnIndex(i);
            colWidths.add(colWidth);
        }
        Config config = new Config();
        config.setColumns(colWidths);
        Preferences.saveColumns(config);

    }

    // A mouse listener for a JTable component.
    // The selected row of the mastertable is being determined.
    public class TableMouseListener extends MouseAdapter {

        @Override
        public void mousePressed(MouseEvent event) {
            // selects the row at which point the mouse is clicked
//            Point point = event.getPoint();
//            int currentRow = masterTable.rowAtPoint(point);
//            masterTable.setRowSelectionInterval(currentRow, currentRow);
//            System.out.println("Current row set: " + currentRow);

            if (event.getClickCount() == 2 && event.getButton() == MouseEvent.BUTTON1) {
                programMode = ProgramMode.CHANGE;
                setStates();
            }

        }
    }

    ActionListener popupActionListener = new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent event) {
            JMenuItem menuItem = (JMenuItem) event.getSource();
            if (menuItem == menuItemAdd) {
                System.out.println(menuItemAdd.getText());
            }
            if (menuItem == menuItemRemove) {
                System.out.println(menuItemRemove.getText());
            }
            if (menuItem == menuItemRemoveAll) {
                System.out.println(menuItemRemoveAll.getText());
            }
            if (menuItem == menuItemPreview) {
                voorbeeldWeergave();
            }
            if (menuItem == menuItemSetStatusLeeg) {
                changeStatusSelectedRow(null);
            }
            if (menuItem == menuItemSetStatusArchief) {
                changeStatusSelectedRow(ItemStatus.ARCHIEF);
            }
            if (menuItem == menuItemSetStatusBelangrijk) {
                changeStatusSelectedRow(ItemStatus.BELANGRIJK);
            }
            if (menuItem == menuItemSetStatusDeleted) {
                changeStatusSelectedRow(ItemStatus.DELETED);
            }
            if (menuItem == menuItemSetStatusOnbelangrijk) {
                changeStatusSelectedRow(ItemStatus.ONBELANGRIJK);
            }
            if (menuItem == menuItemSetStatusBijzonder) {
                changeStatusSelectedRow(ItemStatus.BIJZONDER);
            }

        }
    };

    private void addPopupMenuToTable() {
        JPopupMenu popupMenu = new JPopupMenu();

        menuItemAdd = new JMenuItem("Add New Row");
        menuItemRemove = new JMenuItem("Remove Current Row");
        menuItemRemoveAll = new JMenuItem("Remove All Rows");
        menuItemPreview = new JMenuItem("VoorbeeldWeergave");
        // Status leegmaken
        menuItemSetStatusLeeg = new JMenuItem("Leeg");
        // Archief
        menuItemSetStatusArchief = new JMenuItem("Archief");
        menuItemSetStatusArchief.setIcon(publicDefault.imageArchief);
        // Belangrijk
        menuItemSetStatusBelangrijk = new JMenuItem("Belangrijk");
        menuItemSetStatusBelangrijk.setIcon(publicDefault.imageBelangrijk);
        // Onbelangrijk
        menuItemSetStatusOnbelangrijk = new JMenuItem("Onbelangrijk");
        menuItemSetStatusOnbelangrijk.setIcon(publicDefault.imageOnbelangrijk);
        // Verwijderd
        menuItemSetStatusDeleted = new JMenuItem("Verwijderd");
        menuItemSetStatusDeleted.setIcon(publicDefault.imageVerwijderd);
        // Bijzonder
        menuItemSetStatusBijzonder = new JMenuItem("Bijzonder");
        menuItemSetStatusBijzonder.setIcon(publicDefault.imageBijzonder);

        JMenu subMenuStatus = new JMenu("Zet status");
        subMenuStatus.add(menuItemSetStatusLeeg);
        subMenuStatus.add(menuItemSetStatusArchief);
        subMenuStatus.add(menuItemSetStatusBelangrijk);
        subMenuStatus.add(menuItemSetStatusOnbelangrijk);
        subMenuStatus.add(menuItemSetStatusBijzonder);
        subMenuStatus.add(menuItemSetStatusDeleted);

        popupMenu.add(subMenuStatus);
        popupMenu.add(menuItemAdd);
        popupMenu.add(menuItemRemove);
        popupMenu.add(menuItemRemoveAll);
        popupMenu.add(menuItemPreview);
        

        menuItemAdd.addActionListener(popupActionListener);
        menuItemRemove.addActionListener(popupActionListener);
        menuItemRemoveAll.addActionListener(popupActionListener);
        menuItemPreview.addActionListener(popupActionListener);
        menuItemSetStatusArchief.addActionListener(popupActionListener);
        menuItemSetStatusBelangrijk.addActionListener(popupActionListener);
        menuItemSetStatusDeleted.addActionListener(popupActionListener);
        menuItemSetStatusOnbelangrijk.addActionListener(popupActionListener);
        menuItemSetStatusBijzonder.addActionListener(popupActionListener);
        menuItemSetStatusLeeg.addActionListener(popupActionListener);

        // Override events on the popup menu so the row that is clicked can be selected.
        popupMenu.addPopupMenuListener(new PopupMenuListener() {

            @Override
            public void popupMenuWillBecomeVisible(PopupMenuEvent e) {
                SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        int rowAtPoint = masterTable.rowAtPoint(SwingUtilities.convertPoint(popupMenu, new Point(0, 0), masterTable));
                        if (rowAtPoint > -1) {
                            masterTable.setRowSelectionInterval(rowAtPoint, rowAtPoint);
                        }
                    }
                });
            }

            @Override
            public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }

            @Override
            public void popupMenuCanceled(PopupMenuEvent e) {
                // TODO Auto-generated method stub

            }
        });

        masterTable.setComponentPopupMenu(popupMenu);

    }

    private void setTableConfiguration() {
        // Get all columns in table
        int cols = masterTable.getColumnCount();
        TableColumnModel columnModel = masterTable.getColumnModel();
        // Loop all columns and configure.
        for (int i = 0; i < cols; i++) {
            // Match the index of the columns with the index in the config file.
            for (ColumnWidth colWidth : colWidths) {
                if (colWidth.getColumnIndex() == i) {
                    // Set the column to the position defined in the modelindex.
                    columnModel.getColumn(i).setModelIndex(colWidth.getColumnModelIndex());
                    columnModel.getColumn(i).setPreferredWidth(colWidth.getColumnWidth());
                    columnModel.getColumn(i).setHeaderValue(colWidth.getColumnIdentifier());
                    break;
                }
            }
        }

        masterTable.getColumnModel().getColumn(3).setCellRenderer(publicDefault.dateRenderer);
        masterTable.getColumnModel().getColumn(7).setCellRenderer(publicDefault.statusRenderer);

    }

    private void analyzeAndSave(File file) {
        try {
            Item item = new Item();

            String canonicalPath = file.getCanonicalPath();
            String fileParent = file.getParentFile().getName();
            String fileParentParent = file.getParentFile().getParentFile().getName();

            // Set itemsoort based on extension of the file
            String extension = FilenameUtils.getExtension(canonicalPath);

            // ==============================================================
            // Determine Hoofditem based on parentdir or parent of parentdir.
            // ==============================================================
            Hoofditem hiAnalyze = fetchHoofditemByNaam(fileParent);
            if (hiAnalyze == null) {
                hiAnalyze = fetchHoofditemByNaam(fileParentParent);
                if (hiAnalyze == null) {
                    hiAnalyze = fetchHoofditemByNaam("NB");
                }
            }

            if (hiAnalyze != null) {
                item.setHoofditem(hiAnalyze);
            }

            // ==============================================================
            // Determine Itemcode based on parentdir or parent of parentdir.
            // ==============================================================
            Itemcode itemcodeAnalyze = fetchItemcodeByCode(fileParent);
            if (itemcodeAnalyze == null) {
                itemcodeAnalyze = fetchItemcodeByCode(fileParentParent);
                if (itemcodeAnalyze == null) {
                    itemcodeAnalyze = fetchItemcodeByCode("onbekend");
                }
            }
            if (itemcodeAnalyze != null) {
                item.setItemcode(itemcodeAnalyze);
            }

            // ==============================================================
            // Determine itemsoort based on the extension.
            // ==============================================================
            Itemsoort itemsoort = fetchItemsoortByExtension(extension);

            if (itemsoort == null) {
                itemsoort = fetchItemsoortByExtension("NB");
            }
            item.setItemsoort(itemsoort);

            // Itembeschrijving. Neem de naam van het gelezen bestand.
            item.setItemBeschrijving(FilenameUtils.getBaseName(canonicalPath));

            // Get file creation date and time
            BasicFileAttributes attributes = Files.readAttributes(file.toPath(), BasicFileAttributes.class);
            FileTime creationTime = attributes.lastModifiedTime();
            Date dateCreate = new Date(creationTime.toMillis());
            item.setItemDatumDocument(dateCreate);

            item.setItemDateCreated(Calendar.getInstance().getTime());
            item.setItemDateModified(Calendar.getInstance().getTime());

            item.setItemLocatie(canonicalPath);
            // Validate that the item isn't allready in the database with the fullpath.

            if (itemByLocationExists(canonicalPath)) {
                System.out.println("Item on location '" + canonicalPath + "' already exists. Item is not stored.");
            } else {
                addItem(item);
            }

        } catch (IOException ex) {
            System.out.println("IOException with analyzing a file. " + ex);
        } catch (Exception ex) {
            System.out.println("Something went wrong with analyzing a file. (analyzeAndSave) " + ex);
        }
    }

    private Hoofditem fetchHoofditemByNaam(String naam) {
        List<Hoofditem> lHoofditemOnbekend;
        Query queryHoofdItemOnbekend;
        try {
            queryHoofdItemOnbekend = entityManager.createNamedQuery("Hoofditem.findByHoofditemNaam", Hoofditem.class);
            queryHoofdItemOnbekend.setParameter("hoofditemNaam", naam);
            lHoofditemOnbekend = queryHoofdItemOnbekend.getResultList();
            for (Hoofditem hi2 : lHoofditemOnbekend) {
                // Should be just one result.
                return hi2;
            }
        } catch (Exception ex) {
            System.out.println("Fout bij fetchHoofditemByNaam. " + ex);
        }

        return null;

    }

    private Itemsoort fetchItemsoortByExtension(String extension) {
        Itemsoort returnItemsoort = null;
        List<Extension> lExtension;
        Query queryExtension;
        try {
            queryExtension = entityManager.createNamedQuery("Extension.findByExtensionCode", Extension.class);
            queryExtension.setParameter("extensionCode", extension);
            lExtension = queryExtension.getResultList();
            for (Extension ext : lExtension) {
                // Return first result that is found.
                returnItemsoort = ext.getItemsoort();
                break;
            }
        } catch (Exception ex) {
            System.out.println("Something went wrong in fetchItemsoortByNaam. " + ex);
        }

        return returnItemsoort;
    }

    private Boolean itemByLocationExists(String location) {
        Boolean itemExists = false;
        List<Item> lItem;
        Query queryItem;
        try {
            queryItem = entityManager.createNamedQuery("Item.findByItemLocatie", Item.class);
            queryItem.setParameter("itemLocatie", location);
            lItem = queryItem.getResultList();
            for (Item it : lItem) {
                // If result is found. item exists on specific location.
                itemExists = true;
                break;
            }
        } catch (Exception ex) {
            System.out.println("Something went wrong in fetchItemsoortByNaam. " + ex);
        }
        return itemExists;
    }

    private void startSimpleSearch(String searchString) {
        model.setRowCount(0);
        if (listMasterTable != null && listMasterTable.size() > 0) {
            listMasterTable.clear();
        }

        query = entityManager.createNamedQuery("Item.findByItemLikeBeschrijving", Item.class);
        query.setParameter("itemBeschrijving", "%" + searchString + "%");

        listMasterTable = query.getResultList();
        for (Item item : listMasterTable) {
            addItemToModel(item);
        }

        if (model.getRowCount() > 0) {
            masterTable.setRowSelectionInterval(0, 0);
        }

    }

    private void displayFilter() {
        if (filterWindow == null) {
            JFrame topFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
            filterWindow = new FilterWindow(topFrame, false, this);
        } else {
            filterWindow.setFilter(filter);
        }

        filterWindow.setVisible(true);
    }

    public Filter getFilter() {
        if (filter == null) {
            filter = new Filter();
        }
        return filter;
    }

    public void setFilter(Filter filter) {
        this.filter = filter;
    }

    public void searchAction() {
        model.setRowCount(0);
        if (listMasterTable != null && listMasterTable.size() > 0) {
            listMasterTable.clear();
        }

        query = entityManager.createNamedQuery("Item.findItemWithFilter", Item.class);
        String strItemBeschrijving;
        if (filter.getItemBeschrijving() == null || filter.getItemBeschrijving().equals("")) {
            strItemBeschrijving = "";
        } else {
            strItemBeschrijving = "%" + filter.getItemBeschrijving() + "%";
        }

        String strItemLocatie;
        if (filter.getItemLocatie() == null || filter.getItemLocatie().equals("")) {
            strItemLocatie = "";
        } else {
            strItemLocatie = "%" + filter.getItemLocatie() + "%";
        }

        if (filter.getHoofditem().getHoofditemBeschrijving().equalsIgnoreCase("Geen selectie")) {
            filter.setHoofditem(null);
        }

        if (filter.getItemsoort().getItemsoortBeschrijving().equalsIgnoreCase("Geen selectie")) {
            filter.setItemsoort(null);
        }

        if (filter.getItemcode().getItemcodeCode().equalsIgnoreCase("Geen selectie")) {
            filter.setItemcode(null);
        }

        query.setParameter("itemBeschrijving", strItemBeschrijving);
        query.setParameter("itemLocatie", strItemLocatie);
        query.setParameter("hoofdItem", filter.getHoofditem());
        query.setParameter("itemSoort", filter.getItemsoort());
        query.setParameter("dateFrom", filter.getDateFrom());
        query.setParameter("dateTo", filter.getDateTo());
        query.setParameter("itemCode", filter.getItemcode());
        query.setParameter("itemStatus", filter.getItemStatus());

        listMasterTable = query.getResultList();
        for (Item item : listMasterTable) {
            addItemToModel(item);
        }

        if (model.getRowCount() > 0) {
            masterTable.setRowSelectionInterval(0, 0);
        }

    }

    public void hideFilterWindow() {
        filterWindow.setVisible(false);
    }

    private void openSelectedFile() {
        try {
            desktop.open(new File(displayedItem.getItemLocatie()));
        } catch (IOException ex) {
            System.out.println("An IOException with opening the file. ");
        } catch (IllegalArgumentException ex) {
            System.out.println("The file cannot be found. " + ex);
        } catch (Exception ex) {
            System.out.println("An Exception occurred with opening the file. " + ex);
        }
    }

    private Itemcode fetchItemcodeByCode(String fileParent) {
        Itemcode itemcodeReturn = null;
        List<Itemcode> listItemcode;
        Query queryItemcode;
        try {
            queryItemcode = entityManager.createNamedQuery("Itemcode.findByItemcodeCode", Itemcode.class);
            queryItemcode.setParameter("itemcodeCode", fileParent);
            listItemcode = queryItemcode.getResultList();
            for (Itemcode ic : listItemcode) {
                // Should be just one result.
                itemcodeReturn = ic;
                break;
            }
        } catch (Exception ex) {
            System.out.println("Fout bij fetchHoofditemByNaam. " + ex);
        }
        return itemcodeReturn;
    }

    private void changeStatusSelectedRow(ItemStatus itemStatus) {
        int idx = masterTable.getSelectedRow();
        // Records can be in different order (sorting). Use convertRowIndexToModel.
        idx = masterTable.convertRowIndexToModel(idx);
        if (idx > -1) {
            try {
                entityManager.getTransaction().begin();
                Item it = listMasterTable.get(idx);
                it.setItemstatus(itemStatus);
                entityManager.getTransaction().commit();
                // Update the selected row.
                listMasterTable.set(idx, it);
                masterTable.getModel().setValueAt(itemStatus, idx, 7);

//                ((AbstractTableModel) masterTable.getModel()).fireTableCellUpdated(idx, 7); // Repaint one cell.
            } catch (RollbackException ex) {
                System.out.println("Het opslaan van de data is foutgegaan." + ex);
            } catch (Exception ex) {
                System.out.println("Er is iets helemaal fout gegaan. (changeItem)" + ex);
            }

        }
    }

    void setMDIStart(MDIStart mdiStart) {
        this.mdiStart = mdiStart;
    }

    private void voorbeeldWeergave() {
        int idx = masterTable.getSelectedRow();
        // Records can be in different order (sorting). Use convertRowIndexToModel.
        idx = masterTable.convertRowIndexToModel(idx);
        if (idx > -1) {
            displayedItem = listMasterTable.get(idx);
            if (mdiStart == null) {
                System.out.println("mdiStart = null!");
            } else {
                mdiStart.triggerPreview(displayedItem.getItemLocatie());
            }
        }
    }

}
