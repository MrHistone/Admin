package admin.frames;

import admin.DateConverter;
import java.awt.EventQueue;
import java.beans.Beans;
import java.io.File;
import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.RollbackException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.jdesktop.beansbinding.Converter;

/**
 *
 * @author Bart
 */
public class HoofdItemMasterDetail extends JPanel {

    private boolean bVerwijder = false;
    
    public HoofdItemMasterDetail() {
        initComponents();
        if (!Beans.isDesignTime()) {
            entityManager.getTransaction().begin();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        entityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("administration").createEntityManager();
        query = java.beans.Beans.isDesignTime() ? null : entityManager.createQuery("SELECT h FROM Hoofditem h");
        list = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : org.jdesktop.observablecollections.ObservableCollections.observableList(query.getResultList());
        jFileChooser1 = new javax.swing.JFileChooser();
        jDialogDelete = new javax.swing.JDialog();
        jBtnJa = new javax.swing.JButton();
        jLblZekerWeten = new javax.swing.JLabel();
        jBtnNee = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        masterScrollPane = new javax.swing.JScrollPane();
        masterTable = new javax.swing.JTable();
        hoofditemIdLabel = new javax.swing.JLabel();
        hoofditemNaamLabel = new javax.swing.JLabel();
        hoofditemBeschrijvingLabel = new javax.swing.JLabel();
        hoofditemLokatieOpNetwerkLabel = new javax.swing.JLabel();
        hoofditemDateCreatedLabel = new javax.swing.JLabel();
        hoofditemDateModifiedLabel = new javax.swing.JLabel();
        hoofditemIdField = new javax.swing.JTextField();
        hoofditemNaamField = new javax.swing.JTextField();
        hoofditemBeschrijvingField = new javax.swing.JTextField();
        hoofditemLokatieOpNetwerkField = new javax.swing.JTextField();
        hoofditemDateCreatedField = new javax.swing.JTextField();
        hoofditemDateModifiedField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        jBtnSelectFolder = new javax.swing.JButton();

        FormListener formListener = new FormListener();

        jDialogDelete.setMinimumSize(new java.awt.Dimension(450, 200));
        jDialogDelete.setModal(true);

        jBtnJa.setText("Ja");
        jBtnJa.addActionListener(formListener);

        jLblZekerWeten.setText("Zeker weten dat deze verwijderd moet worden?");

        jBtnNee.setText("Nee");
        jBtnNee.addActionListener(formListener);

        javax.swing.GroupLayout jDialogDeleteLayout = new javax.swing.GroupLayout(jDialogDelete.getContentPane());
        jDialogDelete.getContentPane().setLayout(jDialogDeleteLayout);
        jDialogDeleteLayout.setHorizontalGroup(
            jDialogDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogDeleteLayout.createSequentialGroup()
                .addGroup(jDialogDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialogDeleteLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLblZekerWeten))
                    .addGroup(jDialogDeleteLayout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jBtnJa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtnNee)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jDialogDeleteLayout.setVerticalGroup(
            jDialogDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialogDeleteLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLblZekerWeten)
                .addGap(18, 18, 18)
                .addGroup(jDialogDeleteLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnJa)
                    .addComponent(jBtnNee))
                .addContainerGap(120, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("jMenuItem1");
        jMenuItem1.addActionListener(formListener);
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("jMenuItem2");
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setToolTipText("\"Bewerken HoofdItems\"");
        setName("\"Bewerken HoofdItems\""); // NOI18N

        masterTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, list, masterTable);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hoofditemId}"));
        columnBinding.setColumnName("Id");
        columnBinding.setColumnClass(Integer.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hoofditemNaam}"));
        columnBinding.setColumnName("Naam");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hoofditemBeschrijving}"));
        columnBinding.setColumnName("Beschrijving");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hoofditemLokatieOpNetwerk}"));
        columnBinding.setColumnName("Lokatie Op Netwerk");
        columnBinding.setColumnClass(String.class);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hoofditemDateCreated}"));
        columnBinding.setColumnName("Datum Gemaakt");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${hoofditemDateModified}"));
        columnBinding.setColumnName("Datum Gewijzigd");
        columnBinding.setColumnClass(java.util.Date.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        masterScrollPane.setViewportView(masterTable);
        if (masterTable.getColumnModel().getColumnCount() > 0) {
            masterTable.getColumnModel().getColumn(0).setPreferredWidth(20);
            masterTable.getColumnModel().getColumn(2).setPreferredWidth(200);
        }

        hoofditemIdLabel.setText("Id:");

        hoofditemNaamLabel.setText("Naam:");

        hoofditemBeschrijvingLabel.setText("Beschrijving:");

        hoofditemLokatieOpNetwerkLabel.setText("Lokatie Op Netwerk:");

        hoofditemDateCreatedLabel.setText("Date Created:");

        hoofditemDateModifiedLabel.setText("Date Modified:");

        hoofditemIdField.setEditable(false);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.hoofditemId}"), hoofditemIdField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), hoofditemIdField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.hoofditemNaam}"), hoofditemNaamField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), hoofditemNaamField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.hoofditemBeschrijving}"), hoofditemBeschrijvingField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), hoofditemBeschrijvingField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.hoofditemLokatieOpNetwerk}"), hoofditemLokatieOpNetwerkField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), hoofditemLokatieOpNetwerkField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        hoofditemLokatieOpNetwerkField.addActionListener(formListener);

        hoofditemDateCreatedField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.hoofditemDateCreated}"), hoofditemDateCreatedField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        binding.setConverter(new DateConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), hoofditemDateCreatedField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        hoofditemDateCreatedField.addActionListener(formListener);

        hoofditemDateModifiedField.setEditable(false);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement.hoofditemDateModified}"), hoofditemDateModifiedField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        binding.setSourceUnreadableValue("null");
        binding.setConverter(new DateConverter());
        bindingGroup.addBinding(binding);
        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), hoofditemDateModifiedField, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        saveButton.setText("Save");
        saveButton.addActionListener(formListener);

        refreshButton.setText("Refresh");
        refreshButton.addActionListener(formListener);

        newButton.setText("New");
        newButton.addActionListener(formListener);

        deleteButton.setText("Delete");

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ, masterTable, org.jdesktop.beansbinding.ELProperty.create("${selectedElement != null}"), deleteButton, org.jdesktop.beansbinding.BeanProperty.create("enabled"));
        bindingGroup.addBinding(binding);

        deleteButton.addActionListener(formListener);

        jBtnSelectFolder.setText("...");
        jBtnSelectFolder.addActionListener(formListener);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(newButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(refreshButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hoofditemIdLabel)
                            .addComponent(hoofditemNaamLabel)
                            .addComponent(hoofditemBeschrijvingLabel)
                            .addComponent(hoofditemLokatieOpNetwerkLabel)
                            .addComponent(hoofditemDateCreatedLabel)
                            .addComponent(hoofditemDateModifiedLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(hoofditemIdField, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .addComponent(hoofditemNaamField, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .addComponent(hoofditemBeschrijvingField, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .addComponent(hoofditemDateCreatedField, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .addComponent(hoofditemDateModifiedField, javax.swing.GroupLayout.DEFAULT_SIZE, 516, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(hoofditemLokatieOpNetwerkField)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnSelectFolder, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 618, Short.MAX_VALUE))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deleteButton, newButton, refreshButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(masterScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoofditemIdLabel)
                    .addComponent(hoofditemIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoofditemNaamLabel)
                    .addComponent(hoofditemNaamField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoofditemBeschrijvingLabel)
                    .addComponent(hoofditemBeschrijvingField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoofditemLokatieOpNetwerkLabel)
                    .addComponent(hoofditemLokatieOpNetwerkField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtnSelectFolder))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoofditemDateCreatedLabel)
                    .addComponent(hoofditemDateCreatedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoofditemDateModifiedLabel)
                    .addComponent(hoofditemDateModifiedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveButton)
                    .addComponent(refreshButton)
                    .addComponent(deleteButton)
                    .addComponent(newButton))
                .addContainerGap())
        );

        getAccessibleContext().setAccessibleName("\"Bewerken HoofdItems\"");

        bindingGroup.bind();
    }

    // Code for dispatching events from components to event handlers.

    private class FormListener implements java.awt.event.ActionListener {
        FormListener() {}
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            if (evt.getSource() == hoofditemLokatieOpNetwerkField) {
                HoofdItemMasterDetail.this.hoofditemLokatieOpNetwerkFieldActionPerformed(evt);
            }
            else if (evt.getSource() == hoofditemDateCreatedField) {
                HoofdItemMasterDetail.this.hoofditemDateCreatedFieldActionPerformed(evt);
            }
            else if (evt.getSource() == saveButton) {
                HoofdItemMasterDetail.this.saveButtonActionPerformed(evt);
            }
            else if (evt.getSource() == refreshButton) {
                HoofdItemMasterDetail.this.refreshButtonActionPerformed(evt);
            }
            else if (evt.getSource() == newButton) {
                HoofdItemMasterDetail.this.newButtonActionPerformed(evt);
            }
            else if (evt.getSource() == deleteButton) {
                HoofdItemMasterDetail.this.deleteButtonActionPerformed(evt);
            }
            else if (evt.getSource() == jBtnSelectFolder) {
                HoofdItemMasterDetail.this.jBtnSelectFolderActionPerformed(evt);
            }
            else if (evt.getSource() == jBtnJa) {
                HoofdItemMasterDetail.this.jBtnJaActionPerformed(evt);
            }
            else if (evt.getSource() == jBtnNee) {
                HoofdItemMasterDetail.this.jBtnNeeActionPerformed(evt);
            }
            else if (evt.getSource() == jMenuItem1) {
                HoofdItemMasterDetail.this.jMenuItem1ActionPerformed(evt);
            }
        }
    }// </editor-fold>//GEN-END:initComponents

    @SuppressWarnings("unchecked")
    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        entityManager.getTransaction().rollback();
        entityManager.getTransaction().begin();
        java.util.Collection data = query.getResultList();
        for (Object entity : data) {
            entityManager.refresh(entity);
        }
        list.clear();
        list.addAll(data);
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        int[] selected = masterTable.getSelectedRows();
//        List<admin.Hoofditem> toRemove = new ArrayList<admin.Hoofditem>(selected.length);
        for (int idx = 0; idx < selected.length; idx++) {
            database.Hoofditem h = list.get(masterTable.convertRowIndexToModel(selected[idx]));
//            toRemove.add(h);
            jLblZekerWeten.setText("Zeker weten dat hoofditem " + h.getHoofditemNaam() + " verwijderd moet worden?");
            jDialogDelete.pack();
            jDialogDelete.setVisible(true);
            if (bVerwijder == true) {
                entityManager.remove(h);
                list.remove(h);
            }
            
        }
//        list.removeAll(toRemove);
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        database.Hoofditem h = new database.Hoofditem();
        // Set date/timestamp.
        h.setHoofditemDateCreated(Calendar.getInstance().getTime());
        h.setHoofditemDateModified(Calendar.getInstance().getTime());
        entityManager.persist(h);
        list.add(h);
        int row = list.size() - 1;
        masterTable.setRowSelectionInterval(row, row);
        masterTable.scrollRectToVisible(masterTable.getCellRect(row, 0, true));
    }//GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            // Single Selection, just one selection for update.
            int[] ii = masterTable.getSelectedRows();
            for (int idx : ii) {
                database.Hoofditem hh = list.get(masterTable.convertRowIndexToModel(idx));
                hh.setHoofditemDateModified(Calendar.getInstance().getTime());
            }
//            for (admin.Hoofditem h : list) {
//                h.setHoofditemDateModified(Calendar.getInstance().getTime());
//            }
            entityManager.getTransaction().commit();
            entityManager.getTransaction().begin();
        } catch (RollbackException rex) {
            rex.printStackTrace();
            entityManager.getTransaction().begin();
            List<database.Hoofditem> merged = new ArrayList<database.Hoofditem>(list.size());
            for (database.Hoofditem h : list) {
                merged.add(entityManager.merge(h));
            }
            list.clear();
            list.addAll(merged);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void hoofditemLokatieOpNetwerkFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoofditemLokatieOpNetwerkFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hoofditemLokatieOpNetwerkFieldActionPerformed

    private void jBtnSelectFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnSelectFolderActionPerformed
        JFileChooser fc = new JFileChooser();
        //fc.setCurrentDirectory(new java.io.File(".")); // start at application current directory
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File yourFolder = fc.getSelectedFile();
            try {
                int[] ii = masterTable.getSelectedRows();
                for (int idx : ii) {
                    database.Hoofditem hh = list.get(masterTable.convertRowIndexToModel(idx));
                    hh.setHoofditemLokatieOpNetwerk(yourFolder.getCanonicalPath().toString());
                }
            } catch (IOException ex) {
                Logger.getLogger(HoofdItemMasterDetail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jBtnSelectFolderActionPerformed

    private void jBtnJaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnJaActionPerformed
        bVerwijder = true;
        jDialogDelete.dispose();
    }//GEN-LAST:event_jBtnJaActionPerformed

    private void jBtnNeeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnNeeActionPerformed
        bVerwijder = false;
        jDialogDelete.dispose();
    }//GEN-LAST:event_jBtnNeeActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void hoofditemDateCreatedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hoofditemDateCreatedFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hoofditemDateCreatedFieldActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton deleteButton;
    private javax.persistence.EntityManager entityManager;
    private javax.swing.JTextField hoofditemBeschrijvingField;
    private javax.swing.JLabel hoofditemBeschrijvingLabel;
    private javax.swing.JTextField hoofditemDateCreatedField;
    private javax.swing.JLabel hoofditemDateCreatedLabel;
    private javax.swing.JTextField hoofditemDateModifiedField;
    private javax.swing.JLabel hoofditemDateModifiedLabel;
    private javax.swing.JTextField hoofditemIdField;
    private javax.swing.JLabel hoofditemIdLabel;
    private javax.swing.JTextField hoofditemLokatieOpNetwerkField;
    private javax.swing.JLabel hoofditemLokatieOpNetwerkLabel;
    private javax.swing.JTextField hoofditemNaamField;
    private javax.swing.JLabel hoofditemNaamLabel;
    private javax.swing.JButton jBtnJa;
    private javax.swing.JButton jBtnNee;
    private javax.swing.JButton jBtnSelectFolder;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JDialog jDialogDelete;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLblZekerWeten;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private java.util.List<database.Hoofditem> list;
    private javax.swing.JScrollPane masterScrollPane;
    private javax.swing.JTable masterTable;
    private javax.swing.JButton newButton;
    private javax.persistence.Query query;
    private javax.swing.JButton refreshButton;
    private javax.swing.JButton saveButton;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HoofdItemMasterDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HoofdItemMasterDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HoofdItemMasterDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HoofdItemMasterDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame frame = new JFrame();
                frame.setContentPane(new HoofdItemMasterDetail());
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                frame.pack();
                frame.setVisible(true);
            }
        });
    }

}

class DateConverter2 extends Converter<Date, String> {

    DateFormat dateFormat;

    @Override
    public String convertForward(Date value) {
        return dateFormat.format(value);
    }

    @Override
    public Date convertReverse(String value) {
        try {
            return dateFormat.parse(value);
        } catch (java.text.ParseException ex) {
            return Calendar.getInstance().getTime();
        }

    }

}
