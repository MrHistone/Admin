package admin;

import admin.frames.ItemExtendedFrame;
import admin.frames.*;
import admin.frames.TreeViewGrid.TVGInternalFrame;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Point;
import java.awt.Toolkit;
import java.beans.PropertyVetoException;
import java.util.logging.Level;
import java.util.logging.Logger;

public class MDIStart extends javax.swing.JFrame {

    private HoofdItemFrame hoofdItemFrame;
    private ItemSoortFrame itemSoortFrame;
    private ItemExtendedFrame itemExtendedFrame;
    private ExtensionFrame extensionFrame;
    private ItemcodeFrame itemcodeFrame;
    private TreeviewFrame2 treeviewFrame;
    private TreeViewIntFrame treeViewIntFrame;
    private VoorbeeldWeergaveFrame voorbeeldWeergaveFrame;
    private TVGInternalFrame tvgInternalFrame;
    private MDIStart mdiStart;

    boolean screenStarted = false;

    public MDIStart() {
        initComponents();
        mdiStart = this;
        setIcon();
        loadAndSetPositionAndSizeOfWindow();
        Thread thread = new Thread(new TVGInternalFrameStart());
        setCursor(new Cursor(Cursor.WAIT_CURSOR));
        thread.start();
//
//        // Start voorbeeldweergave in achtergrond.
//        thread = new Thread(new VoorbeeldWeergaveFrameStart());
//        setCursor(new Cursor(Cursor.WAIT_CURSOR));
//
//        thread.start();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMnuOnderdelen = new javax.swing.JMenu();
        jMnuIitem = new javax.swing.JMenuItem();
        jMnuHoofditem = new javax.swing.JMenuItem();
        jMnuItemSoort = new javax.swing.JMenuItem();
        jMnuExtension = new javax.swing.JMenuItem();
        jMnuItemcode = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMnuTreeview = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Mijn Administratie");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMnuOnderdelen.setText("Onderdelen");

        jMnuIitem.setText("Item");
        jMnuIitem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuIitemActionPerformed(evt);
            }
        });
        jMnuOnderdelen.add(jMnuIitem);

        jMnuHoofditem.setText("Hoofditem");
        jMnuHoofditem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuHoofditemActionPerformed(evt);
            }
        });
        jMnuOnderdelen.add(jMnuHoofditem);

        jMnuItemSoort.setText("ItemSoort");
        jMnuItemSoort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuItemSoortActionPerformed(evt);
            }
        });
        jMnuOnderdelen.add(jMnuItemSoort);

        jMnuExtension.setText("Extension");
        jMnuExtension.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuExtensionActionPerformed(evt);
            }
        });
        jMnuOnderdelen.add(jMnuExtension);

        jMnuItemcode.setText("Itemcode");
        jMnuItemcode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuItemcodeActionPerformed(evt);
            }
        });
        jMnuOnderdelen.add(jMnuItemcode);
        jMnuOnderdelen.add(jSeparator1);
        jMnuOnderdelen.add(jSeparator2);

        jMnuTreeview.setText("Treeview");
        jMnuTreeview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMnuTreeviewActionPerformed(evt);
            }
        });
        jMnuOnderdelen.add(jMnuTreeview);

        menuBar.add(jMnuOnderdelen);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentMenuItem.setMnemonic('c');
        contentMenuItem.setText("Contents");
        helpMenu.add(contentMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1042, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void jMnuHoofditemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuHoofditemActionPerformed
        System.out.println("Starting screen...");

        Thread thread = new Thread(new hoofdItemFrameStart());
        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        thread.start();

    }//GEN-LAST:event_jMnuHoofditemActionPerformed

    private void jMnuIitemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuIitemActionPerformed
        Thread thread = new Thread(new ItemExtendedStart());
        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        thread.start();


    }//GEN-LAST:event_jMnuIitemActionPerformed

    private void jMnuItemSoortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuItemSoortActionPerformed
        Thread thread = new Thread(new ItemSoortFrameStart());
        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        thread.start();
    }//GEN-LAST:event_jMnuItemSoortActionPerformed

    private void jMnuExtensionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuExtensionActionPerformed
        Thread thread = new Thread(new ExtensionFrameStart());
        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        thread.start();

    }//GEN-LAST:event_jMnuExtensionActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        savePositionAndSizeOfWindow();
    }//GEN-LAST:event_formWindowClosing

    private void jMnuItemcodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuItemcodeActionPerformed
        Thread thread = new Thread(new ItemcodeFrameStart());
        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        thread.start();
    }//GEN-LAST:event_jMnuItemcodeActionPerformed

    private void jMnuTreeviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMnuTreeviewActionPerformed
        Thread thread = new Thread(new TreeviewFrameStart());
        setCursor(new Cursor(Cursor.WAIT_CURSOR));

        thread.start();


    }//GEN-LAST:event_jMnuTreeviewActionPerformed

    private void startVoorbeeldWeergaveScreen(String fileNameInput) {
        if (voorbeeldWeergaveFrame == null) {
            // Start het voorbeeldweergave scherm.

            Thread thread = new Thread(new VoorbeeldWeergaveFrameStart2(fileNameInput));
            setCursor(new Cursor(Cursor.WAIT_CURSOR));

            thread.start();
        }
    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("administratie.png")));
    }

    class hoofdItemFrameStart implements Runnable {

        @Override
        public void run() {
            screenStarted = false;
            hoofdItemFrame = new HoofdItemFrame();
            screenStarted = true;
            desktopPane.add(hoofdItemFrame);
            hoofdItemFrame.setVisible(true);
            setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        }

    }

    class ItemExtendedStart implements Runnable {

        @Override
        public void run() {
            itemExtendedFrame = new ItemExtendedFrame();
            desktopPane.add(itemExtendedFrame);
            itemExtendedFrame.setVisible(true);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
            // Send handle of main MDI
            itemExtendedFrame.setMDIHandle(mdiStart);
        }
    }

    class ItemSoortFrameStart implements Runnable {

        @Override
        public void run() {
            itemSoortFrame = new ItemSoortFrame();
            desktopPane.add(itemSoortFrame);
            itemSoortFrame.setVisible(true);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    class ExtensionFrameStart implements Runnable {

        @Override
        public void run() {
            extensionFrame = new ExtensionFrame();
            desktopPane.add(extensionFrame);
            extensionFrame.setVisible(true);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    class ItemcodeFrameStart implements Runnable {

        @Override
        public void run() {
            itemcodeFrame = new ItemcodeFrame();
            desktopPane.add(itemcodeFrame);
            itemcodeFrame.setVisible(true);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    class VoorbeeldWeergaveFrameStart implements Runnable {

        @Override
        public void run() {
            voorbeeldWeergaveFrame = new VoorbeeldWeergaveFrame();
            desktopPane.add(voorbeeldWeergaveFrame);
            voorbeeldWeergaveFrame.setVisible(true);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    class VoorbeeldWeergaveFrameStart2 implements Runnable {

        String fileNameClass;

        VoorbeeldWeergaveFrameStart2(String fileNameInput) {
            fileNameClass = fileNameInput;
        }

        @Override
        public void run() {
            voorbeeldWeergaveFrame = new VoorbeeldWeergaveFrame();
            desktopPane.add(voorbeeldWeergaveFrame);
            voorbeeldWeergaveFrame.setVisible(true);
            voorbeeldWeergaveFrame.triggerPreview(fileNameClass);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    class TreeviewFrameStart implements Runnable {

        @Override
        public void run() {
            treeviewFrame = new TreeviewFrame2();
            desktopPane.add(treeviewFrame);
            treeviewFrame.setVisible(true);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    class TreeViewIntFrameStart implements Runnable {

        @Override
        public void run() {
            treeViewIntFrame = new TreeViewIntFrame();
            desktopPane.add(treeViewIntFrame);
            treeViewIntFrame.setVisible(true);
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    class TVGInternalFrameStart implements Runnable {

        @Override
        public void run() {
            tvgInternalFrame = new TVGInternalFrame();
            desktopPane.add(tvgInternalFrame);
            tvgInternalFrame.setVisible(true);
            try {
                tvgInternalFrame.setMaximum(true);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(MDIStart.class.getName()).log(Level.SEVERE, null, ex);
            }
            setCursor(new Cursor((Cursor.DEFAULT_CURSOR)));
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MDIStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MDIStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MDIStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MDIStart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MDIStart().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JMenuItem contentMenuItem;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem jMnuExtension;
    private javax.swing.JMenuItem jMnuHoofditem;
    private javax.swing.JMenuItem jMnuIitem;
    private javax.swing.JMenuItem jMnuItemSoort;
    private javax.swing.JMenuItem jMnuItemcode;
    private javax.swing.JMenu jMnuOnderdelen;
    private javax.swing.JMenuItem jMnuTreeview;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    // End of variables declaration//GEN-END:variables

    private void savePositionAndSizeOfWindow() {
        try {
            // Get window name
            String className = this.getClass().getName();
            Dimension size = this.getSize();
            Point point = this.getLocationOnScreen();
            ConfigWindow confWin = new ConfigWindow();
            confWin.setDimension(size);
            confWin.setPoint(point);
            confWin.setWindowName(className);
            Preferences.saveProperties(confWin);
        } catch (Exception ex) {
            System.out.println("Something terrible happened with saving "
                    + "the window size and position. "
                    + "(loadAndSetPositionAndSizeOfWindow) of "
                    + this.getClass().getName() + ex);
        }

    }

    private void loadAndSetPositionAndSizeOfWindow() {

        ConfigWindow confWin = Preferences.loadProperties(this.getClass().getName());
        if (confWin == null) {
            System.out.println("Geen confWin gevonden voor " + this.getClass().getName());
        }

        try {
            if (confWin.getDimension() != null && confWin.getDimension().getWidth() > 0 && confWin.getDimension().getHeight() > 0) {
                this.setSize(confWin.getDimension());
            }

            if (confWin.getPoint() != null && confWin.getPoint().getX() > 0 && confWin.getPoint().getY() > 0) {
                this.setLocation(confWin.getPoint());
            }
        } catch (Exception ex) {
            System.out.println("Something terrible happened with loading "
                    + "and/or setting the window size and position. "
                    + "(loadAndSetPositionAndSizeOfWindow) of "
                    + this.getClass().getName() + ex);
            ex.printStackTrace();
        }

    }

    public void triggerPreview(String fileName) {
        if (voorbeeldWeergaveFrame == null) {
            startVoorbeeldWeergaveScreen(fileName);
        } else {
            voorbeeldWeergaveFrame.triggerPreview(fileName);

            voorbeeldWeergaveFrame.toFront();
            voorbeeldWeergaveFrame.requestFocus();
            voorbeeldWeergaveFrame.setVisible(true);

        }

    }

}
